// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package es_test

import (
	"context"
	"github.com/kyuff/es"
	"iter"
	"sync"
)

// Ensure, that ReadWriterMock does implement es.ReadWriter.
// If this is not the case, regenerate this file with moq.
var _ es.ReadWriter = &ReadWriterMock{}

// ReadWriterMock is a mock implementation of es.ReadWriter.
//
//	func TestSomethingThatUsesReadWriter(t *testing.T) {
//
//		// make and configure a mocked es.ReadWriter
//		mockedReadWriter := &ReadWriterMock{
//			ReadFunc: func(ctx context.Context, entityType string, entityID string, eventNumber int64) iter.Seq2[es.Event, error] {
//				panic("mock out the Read method")
//			},
//			WriteFunc: func(ctx context.Context, entityType string, events iter.Seq2[es.Event, error]) error {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedReadWriter in code that requires es.ReadWriter
//		// and then make assertions.
//
//	}
type ReadWriterMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func(ctx context.Context, entityType string, entityID string, eventNumber int64) iter.Seq2[es.Event, error]

	// WriteFunc mocks the Write method.
	WriteFunc func(ctx context.Context, entityType string, events iter.Seq2[es.Event, error]) error

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityType is the entityType argument value.
			EntityType string
			// EntityID is the entityID argument value.
			EntityID string
			// EventNumber is the eventNumber argument value.
			EventNumber int64
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityType is the entityType argument value.
			EntityType string
			// Events is the events argument value.
			Events iter.Seq2[es.Event, error]
		}
	}
	lockRead  sync.RWMutex
	lockWrite sync.RWMutex
}

// Read calls ReadFunc.
func (mock *ReadWriterMock) Read(ctx context.Context, entityType string, entityID string, eventNumber int64) iter.Seq2[es.Event, error] {
	if mock.ReadFunc == nil {
		panic("ReadWriterMock.ReadFunc: method is nil but ReadWriter.Read was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EntityType  string
		EntityID    string
		EventNumber int64
	}{
		Ctx:         ctx,
		EntityType:  entityType,
		EntityID:    entityID,
		EventNumber: eventNumber,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(ctx, entityType, entityID, eventNumber)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedReadWriter.ReadCalls())
func (mock *ReadWriterMock) ReadCalls() []struct {
	Ctx         context.Context
	EntityType  string
	EntityID    string
	EventNumber int64
} {
	var calls []struct {
		Ctx         context.Context
		EntityType  string
		EntityID    string
		EventNumber int64
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *ReadWriterMock) Write(ctx context.Context, entityType string, events iter.Seq2[es.Event, error]) error {
	if mock.WriteFunc == nil {
		panic("ReadWriterMock.WriteFunc: method is nil but ReadWriter.Write was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		EntityType string
		Events     iter.Seq2[es.Event, error]
	}{
		Ctx:        ctx,
		EntityType: entityType,
		Events:     events,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(ctx, entityType, events)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedReadWriter.WriteCalls())
func (mock *ReadWriterMock) WriteCalls() []struct {
	Ctx        context.Context
	EntityType string
	Events     iter.Seq2[es.Event, error]
} {
	var calls []struct {
		Ctx        context.Context
		EntityType string
		Events     iter.Seq2[es.Event, error]
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}

// Ensure, that StorageMock does implement es.Storage.
// If this is not the case, regenerate this file with moq.
var _ es.Storage = &StorageMock{}

// StorageMock is a mock implementation of es.Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked es.Storage
//		mockedStorage := &StorageMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			GetEntityIDsFunc: func(ctx context.Context, entityType string, storeEntityID string, limit int64) ([]string, string, error) {
//				panic("mock out the GetEntityIDs method")
//			},
//			ReadFunc: func(ctx context.Context, entityType string, entityID string, eventNumber int64) iter.Seq2[es.Event, error] {
//				panic("mock out the Read method")
//			},
//			RegisterFunc: func(entityType string, types ...es.Content) error {
//				panic("mock out the Register method")
//			},
//			StartPublishFunc: func(w es.Writer) error {
//				panic("mock out the StartPublish method")
//			},
//			WriteFunc: func(ctx context.Context, entityType string, events iter.Seq2[es.Event, error]) error {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedStorage in code that requires es.Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetEntityIDsFunc mocks the GetEntityIDs method.
	GetEntityIDsFunc func(ctx context.Context, entityType string, storeEntityID string, limit int64) ([]string, string, error)

	// ReadFunc mocks the Read method.
	ReadFunc func(ctx context.Context, entityType string, entityID string, eventNumber int64) iter.Seq2[es.Event, error]

	// RegisterFunc mocks the Register method.
	RegisterFunc func(entityType string, types ...es.Content) error

	// StartPublishFunc mocks the StartPublish method.
	StartPublishFunc func(w es.Writer) error

	// WriteFunc mocks the Write method.
	WriteFunc func(ctx context.Context, entityType string, events iter.Seq2[es.Event, error]) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetEntityIDs holds details about calls to the GetEntityIDs method.
		GetEntityIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityType is the entityType argument value.
			EntityType string
			// StoreEntityID is the storeEntityID argument value.
			StoreEntityID string
			// Limit is the limit argument value.
			Limit int64
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityType is the entityType argument value.
			EntityType string
			// EntityID is the entityID argument value.
			EntityID string
			// EventNumber is the eventNumber argument value.
			EventNumber int64
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// EntityType is the entityType argument value.
			EntityType string
			// Types is the types argument value.
			Types []es.Content
		}
		// StartPublish holds details about calls to the StartPublish method.
		StartPublish []struct {
			// W is the w argument value.
			W es.Writer
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EntityType is the entityType argument value.
			EntityType string
			// Events is the events argument value.
			Events iter.Seq2[es.Event, error]
		}
	}
	lockClose        sync.RWMutex
	lockGetEntityIDs sync.RWMutex
	lockRead         sync.RWMutex
	lockRegister     sync.RWMutex
	lockStartPublish sync.RWMutex
	lockWrite        sync.RWMutex
}

// Close calls CloseFunc.
func (mock *StorageMock) Close() error {
	if mock.CloseFunc == nil {
		panic("StorageMock.CloseFunc: method is nil but Storage.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedStorage.CloseCalls())
func (mock *StorageMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetEntityIDs calls GetEntityIDsFunc.
func (mock *StorageMock) GetEntityIDs(ctx context.Context, entityType string, storeEntityID string, limit int64) ([]string, string, error) {
	if mock.GetEntityIDsFunc == nil {
		panic("StorageMock.GetEntityIDsFunc: method is nil but Storage.GetEntityIDs was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		EntityType    string
		StoreEntityID string
		Limit         int64
	}{
		Ctx:           ctx,
		EntityType:    entityType,
		StoreEntityID: storeEntityID,
		Limit:         limit,
	}
	mock.lockGetEntityIDs.Lock()
	mock.calls.GetEntityIDs = append(mock.calls.GetEntityIDs, callInfo)
	mock.lockGetEntityIDs.Unlock()
	return mock.GetEntityIDsFunc(ctx, entityType, storeEntityID, limit)
}

// GetEntityIDsCalls gets all the calls that were made to GetEntityIDs.
// Check the length with:
//
//	len(mockedStorage.GetEntityIDsCalls())
func (mock *StorageMock) GetEntityIDsCalls() []struct {
	Ctx           context.Context
	EntityType    string
	StoreEntityID string
	Limit         int64
} {
	var calls []struct {
		Ctx           context.Context
		EntityType    string
		StoreEntityID string
		Limit         int64
	}
	mock.lockGetEntityIDs.RLock()
	calls = mock.calls.GetEntityIDs
	mock.lockGetEntityIDs.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *StorageMock) Read(ctx context.Context, entityType string, entityID string, eventNumber int64) iter.Seq2[es.Event, error] {
	if mock.ReadFunc == nil {
		panic("StorageMock.ReadFunc: method is nil but Storage.Read was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EntityType  string
		EntityID    string
		EventNumber int64
	}{
		Ctx:         ctx,
		EntityType:  entityType,
		EntityID:    entityID,
		EventNumber: eventNumber,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(ctx, entityType, entityID, eventNumber)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedStorage.ReadCalls())
func (mock *StorageMock) ReadCalls() []struct {
	Ctx         context.Context
	EntityType  string
	EntityID    string
	EventNumber int64
} {
	var calls []struct {
		Ctx         context.Context
		EntityType  string
		EntityID    string
		EventNumber int64
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *StorageMock) Register(entityType string, types ...es.Content) error {
	if mock.RegisterFunc == nil {
		panic("StorageMock.RegisterFunc: method is nil but Storage.Register was just called")
	}
	callInfo := struct {
		EntityType string
		Types      []es.Content
	}{
		EntityType: entityType,
		Types:      types,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	return mock.RegisterFunc(entityType, types...)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedStorage.RegisterCalls())
func (mock *StorageMock) RegisterCalls() []struct {
	EntityType string
	Types      []es.Content
} {
	var calls []struct {
		EntityType string
		Types      []es.Content
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// StartPublish calls StartPublishFunc.
func (mock *StorageMock) StartPublish(w es.Writer) error {
	if mock.StartPublishFunc == nil {
		panic("StorageMock.StartPublishFunc: method is nil but Storage.StartPublish was just called")
	}
	callInfo := struct {
		W es.Writer
	}{
		W: w,
	}
	mock.lockStartPublish.Lock()
	mock.calls.StartPublish = append(mock.calls.StartPublish, callInfo)
	mock.lockStartPublish.Unlock()
	return mock.StartPublishFunc(w)
}

// StartPublishCalls gets all the calls that were made to StartPublish.
// Check the length with:
//
//	len(mockedStorage.StartPublishCalls())
func (mock *StorageMock) StartPublishCalls() []struct {
	W es.Writer
} {
	var calls []struct {
		W es.Writer
	}
	mock.lockStartPublish.RLock()
	calls = mock.calls.StartPublish
	mock.lockStartPublish.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *StorageMock) Write(ctx context.Context, entityType string, events iter.Seq2[es.Event, error]) error {
	if mock.WriteFunc == nil {
		panic("StorageMock.WriteFunc: method is nil but Storage.Write was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		EntityType string
		Events     iter.Seq2[es.Event, error]
	}{
		Ctx:        ctx,
		EntityType: entityType,
		Events:     events,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(ctx, entityType, events)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedStorage.WriteCalls())
func (mock *StorageMock) WriteCalls() []struct {
	Ctx        context.Context
	EntityType string
	Events     iter.Seq2[es.Event, error]
} {
	var calls []struct {
		Ctx        context.Context
		EntityType string
		Events     iter.Seq2[es.Event, error]
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
